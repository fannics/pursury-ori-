<?php

namespace ProjectCarrasco\Paginator;

use Illuminate\Contracts\Pagination\Presenter;
use Illuminate\Pagination\BootstrapThreePresenter;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Pagination\Paginator;
use Illuminate\Pagination\UrlWindow;
use Symfony\Component\HttpFoundation\Request;


class AppPaginator extends LengthAwarePaginator
{
    /**
     * Create a new paginator instance.
     *
     * @param  mixed $items
     * @param  int $total
     * @param  int $perPage
     * @param  int|null $currentPage
     * @param  array $options (path, query, fragment, pageName)
     * @return void
     */
    public function __construct($items, $total, $perPage, $currentPage = null, array $options = [])
    {
        parent::__construct($items, $total, $perPage, $currentPage, $options); // TODO: Change the autogenerated stub

        //replace the controllers namespace from the current route action

        $route_name = \Route::currentRouteName();

//        dump($route_name, \URL::current());

        if ($route_name == 'all_route'){
            $this->setPath($this->removePaginationFromUrl(\URL::current()));
        } else {
            $this->setPath(\URL::route(
                    \Route::currentRouteName()
                ).'/');
        }

    }

    private function removePaginationFromUrl($url){

        $parsed = parse_url($url);

        $path = isset($parsed['path']) ? $parsed['path'] : '';

        $segments = explode('/', $path);

        $segments = array_filter($segments, function($value){
            if ($value){
                return $value;
            }
        });

        $segments = array_merge(array(), $segments);

        $potential_page = null;

        if (count($segments) > 0){
            if (is_numeric($segments[count($segments) - 1])) {

                $potential_page = $segments[count($segments) - 1];

                return substr($url, 0, strlen($url) - strlen($potential_page));
            } else {
                return $url;
            }
        } else {

            return $url;
        }
    }

    /**
     * Get a URL for a given page number.
     *
     * @param  int $page
     * @return string
     */
    public function url($page)
    {

        $currentRequest = \App::getFacadeRoot()['request'];

        if ($page <= 0) $page = 1;

        // If we have any extra query string key / value pairs that need to be added
        // onto the URL, we will put them in query string form and then attach it
        // to the URL. This allows for extra information like sortings storage.

        $parameters = array();

        $currentQueryString = $currentRequest->getQueryString();

        if (ends_with($this->path, '/')){
            $base_url = $this->path.$page;
        } else {
            $base_url = $this->path.'/'.$page;
        }

        if (!ends_with($base_url, '/')){
            $base_url .= '/';
        }


        $base_url = $base_url.($currentQueryString ? '?'.$currentQueryString : null)
            .$this->buildFragment();

        return $base_url;

    }
}