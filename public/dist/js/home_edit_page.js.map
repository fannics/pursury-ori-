{"version":3,"sources":["home_edit_page.js"],"names":[],"mappingsfile":"home_edit_page.js","sourcesContent":["angular.module('HomepageEdit', ['ui.bootstrap', 'color.picker'])\n    .config(['$interpolateProvider', function($interpolateProvider){\n\n        $interpolateProvider.startSymbol('<%');\n        $interpolateProvider.endSymbol('%>');\n\n    }])\n    .controller('MainController', ['$scope', '$http', '$modal', function($scope, $http, $modal){\n\n        $scope.home_definition = {};\n\n        $http.get(window.app_prefix + '/admin/homepage/definition')\n            .success(function(res){\n\n                $scope.home_definition = res.data;\n                $scope.theme_id = res.id;\n                $scope.theme = res.data.theme;\n\n            })\n            .error(function(){\n\n            });\n\n        $scope.button_edit_action = null;\n        $scope.button_edit_source = null;\n\n        var saveDefinition = function(){\n            $http.post(window.app_prefix + '/admin/homepage/update', {data: $scope.home_definition, theme_id: $scope.theme_id})\n                .success(function(res){\n                    document.getElementById('the-frame').contentDocument.location.reload(true);\n                })\n                .error(function(){\n\n                });\n        };\n\n        $scope.editLinkModal = function(link, source, max){\n\n            if (link){\n\n\n\n                $scope.selected_button = link;\n                $scope.button_edit_action = 'edit';\n\n\n            } else {\n\n                if (undefined !== $scope.home_definition.home_top && undefined !== $scope.home_definition.home_top.buttons && $scope.home_definition.home_top.buttons.length >= max){\n                    bootbox.alert('Solo puede agregar ' + max + ' botones');\n                    return;\n                }\n\n                $scope.selected_button = {\n                    title: '',\n                    text: '',\n                    url: ''\n\n                };\n\n                $scope.button_edit_action = 'create';\n            }\n\n            $scope.button_edit_source = source;\n\n            var modalInstance = $modal.open({\n                animation: true,\n                template: angular.element(document.getElementById('myModalContent')).html(),\n                controller: 'ButtonModalController',\n                size: 'md',\n                backdrop: 'static',\n                keyboard: false,\n                resolve: {\n                    selected_button: function(){ return $scope.selected_button; }\n                }\n            });\n\n            modalInstance.result.then(function(res){\n\n                if (res && $scope.button_edit_action && $scope.button_edit_source){\n\n                    if ($scope.button_edit_action == 'create'){\n                        $scope.home_definition[$scope.button_edit_source].buttons.push(res);\n                    }\n\n                    saveDefinition();\n\n                }\n            }, function(){\n\n            });\n        };\n\n        $scope.removeButton = function(source, index){\n\n            $scope.home_definition[source].buttons.splice(index,1);\n\n            saveDefinition();\n\n        };\n\n        $scope.navigationModal = function (source, levels){\n\n            var navigationModalInstance = $modal.open({\n                animation: true,\n                template: angular.element(document.getElementById('navigationModalContent')).html(),\n                controller: 'NavigationMakerController',\n                size: 'lg',\n                backdrop: 'static',\n                keyboard: false,\n                resolve: {\n                    navigation: function(){\n                        switch(source){\n                            case 'navigation':\n                                return $scope.home_definition.navigation;\n                                break;\n                            case 'home_bottom.navigation':\n                                return $scope.home_definition.home_bottom.navigation;\n                                break;\n                        }\n\n                    },\n                    navigation_levels: function(){ return levels; }\n                }\n            });\n\n            navigationModalInstance.result.then(function(res){\n\n                switch(source){\n                    case 'navigation':\n                        $scope.home_definition.navigation = res;\n                        break;\n                    case 'home_bottom.navigation':\n                        $scope.home_definition.home_bottom.navigation = res;\n                        break;\n                }\n\n                saveDefinition();\n\n            }, function(){\n\n            });\n        };\n\n        $scope.available_translations = [\n            {\n                'label': 'United Kingdom',\n                'url': 'https://www.entrenamiento.com/uk',\n                'value': 'uk'\n            },\n            {\n                'label': 'Deutchsland',\n                'url': 'https://www.entrenamiento.com/de',\n                'value': 'de'\n            },\n            {\n                'label': 'United States',\n                'url': 'https://www.entrenamiento.com/us',\n                'value': 'us'\n            }\n        ];\n\n        $scope.toggleTrans = function(t){\n\n            var index = $scope.home_definition.footer.translations.indexOf(t.value);\n\n            if (index > -1){\n\n                $scope.home_definition.footer.translations.splice(index, 1);\n\n            } else {\n                $scope.home_definition.footer.translations.push(t.value);\n            }\n\n            saveDefinition();\n\n        };\n\n        $scope.transEnabled = function(t){\n            for (var i in $scope.home_definition.footer.translations){\n                if ($scope.home_definition.footer.translations[i].value == t.value){\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.saveChanges = function(){\n\n            $scope.home_definition.theme = $scope.theme;\n            saveDefinition();\n            \n        };\n\n        $('#home_background').fileupload({\n            url: window.app_prefix + '/admin/homepage/home-background',\n            dataType: 'json',\n            send: function(e, data){\n                var elem = $('#background-upload-btn > span');\n                var text = elem.text();\n                elem.text(elem.attr('data-loading-text'));\n                elem.attr('data-loading-text', text);\n            },\n            done: function (e, data) {\n                alert('done')\n            },\n            always: function(e, data){\n                var elem = $('#background-upload-btn > span');\n                var text = elem.text();\n                elem.text(elem.attr('data-loading-text'));\n                elem.attr('data-loading-text', text);\n            }\n        }).prop('disabled', !$.support.fileInput)\n            .parent().addClass($.support.fileInput ? undefined : 'disabled');\n\n        $('#logo_upload').fileupload({\n            url: window.app_prefix + '/admin/homepage/logo',\n            dataType: 'json',\n            send: function(e, data){\n                var elem = $('#logo-upload-btn > span');\n                var text = elem.text();\n                elem.text(elem.attr('data-loading-text'));\n                elem.attr('data-loading-text', text);\n            },\n            done: function (e, data) {\n                alert('done')\n            },\n            always: function(e, data){\n                var elem = $('#logo-upload-btn > span');\n                var text = elem.text();\n                elem.text(elem.attr('data-loading-text'));\n                elem.attr('data-loading-text', text);\n            }\n        }).prop('disabled', !$.support.fileInput)\n            .parent().addClass($.support.fileInput ? undefined : 'disabled');\n\n        $('#small_logo_upload').fileupload({\n            url: window.app_prefix + '/admin/homepage/small-logo',\n            dataType: 'json',\n            send: function(e, data){\n                var elem = $('#logo-small-upload-btn > span');\n                var text = elem.text();\n                elem.text(elem.attr('data-loading-text'));\n                elem.attr('data-loading-text', text);\n            },\n            done: function (e, data) {\n                alert('done')\n            },\n            always: function(e, data){\n                var elem = $('#logo-small-upload-btn > span');\n                var text = elem.text();\n                elem.text(elem.attr('data-loading-text'));\n                elem.attr('data-loading-text', text);\n            }\n        }).prop('disabled', !$.support.fileInput)\n            .parent().addClass($.support.fileInput ? undefined : 'disabled');\n\n\n    }])\n    .controller('ButtonModalController', ['$scope', '$modalInstance', '$timeout', '$http', 'selected_button', function($scope, $modalInstance, $timeout, $http, selected_button){\n\n        $scope.selected_button = selected_button;\n\n        $scope.ok = function(){\n\n            $scope.show_url_error = false;\n\n            if ($scope.button_form.$valid){\n                // $modalInstance.close($scope.selected_button);\n                $modalInstance.close($scope.selected_button);\n            }\n\n        };\n\n    }])\n    .controller('NavigationMakerController', ['$scope', '$modalInstance', 'navigation', '$http', '$timeout', 'navigation_levels',function($scope, $modalInstance, navigation, $http, $timeout, navigation_levels){\n\n        $scope.selected_node = [];\n\n        $scope.items_receiver = null;\n\n        $scope.navigation = angular.copy(navigation);\n\n        $scope.categories = null;\n\n        $http.get(window.app_prefix + '/admin/homepage/categories')\n            .success(function(res){\n                $scope.categories = res.categories;\n            })\n            .error(function(){\n\n            });\n\n        $scope.addNodeAction = function(list){\n\n            $scope.show_form = true;\n            $scope.reset($scope.add_node);\n            $scope.items_receiver = list;\n            $scope.form_action = 'add';\n\n        };\n\n        $scope.reset = function(form) {\n            if (form) {\n                form.$setPristine();\n                form.$setUntouched();\n            }\n            $scope.new_node = {};\n            $scope.selecte_category = {};\n        };\n\n        $scope.createNode = function(node_type){\n            if ($scope.add_node.$valid){\n\n                if ($scope.form_action == 'add'){\n                    var elem = angular.copy($scope.new_node);\n                    $scope.show_form = false;\n                    $scope.items_receiver.push(elem);\n                } else {\n                    $scope.selected_item = $scope.new_node;\n                }\n            }\n        };\n\n        $scope.$watch('selected_category', function(){\n            if ($scope.selected_category){\n                $scope.new_node = {\n                    url: $scope.selected_category.url,\n                    title: $scope.selected_category.text,\n                    text: $scope.selected_category.text\n                };\n            }\n        });\n\n        $scope.selected_indexes = [];\n\n        $scope.form_action = 'add';\n\n        $scope.selected_item = null;\n\n        $scope.selectNode = function(list, node, index){\n\n            if (list <= navigation_levels - 1){\n                $scope.new_node = node;\n\n                $scope.show_form = true;\n\n                $scope.form_action = 'edit';\n\n                $scope.selected_item = node;\n\n                if (node.children == undefined){\n                    node.children = [];\n                }\n\n                if (list == 0){\n                    $scope.selected_node[1] = null;\n                    $scope.selected_node[2] = null;\n                }\n\n                $scope.selected_node[list] = node;\n                $scope.selected_indexes[list] = index;\n\n                $scope.remove_confirm = false;\n\n            }\n        };\n\n        $scope.saveNavigation = function(){\n            $modalInstance.close($scope.navigation);\n        };\n\n        $scope.isNodeActive = function(list, index){\n            if (undefined !== $scope.selected_indexes[list]){\n                return $scope.selected_indexes[list] == index;\n            }\n            return false;\n        };\n\n        $scope.childrenCount = function(node){\n            return undefined !== node.children ? node.children.length.toString() : '0';\n        };\n\n        $scope.removeConfirm = function(list, index){\n            $scope.remove_confirm = true;\n            $scope.remove_from_list = list;\n            $scope.remove_index = index;\n        };\n\n        $scope.removeNode = function(){\n            $scope.remove_from_list.splice($scope.remove_index, 1);\n            $scope.cancelRemove();\n        };\n\n        $scope.cancelRemove = function(){\n            $scope.remove_confirm = false;\n            $scope.remove_from_list = null;\n            $scope.remove_index = null;\n        };\n\n    }]);\n"]}